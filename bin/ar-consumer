#!/usr/bin/python

# Copyright (c) 2013 GRNET S.A., SRCE, IN2P3 CNRS Computing Centre
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language
# governing permissions and limitations under the License.
# 
# The views and conclusions contained in the software and
# documentation are those of the authors and should not be
# interpreted as representing official policies, either expressed
# or implied, of either GRNET S.A., SRCE or IN2P3 CNRS Computing
# Centre
# 
# The work represented by this source file is partially funded by
# the EGI-InSPIRE project through the European Commission's 7th
# Framework Programme (contract # INFSO-RI-261323) 

import sys
import os
import time
import stomp
import logging
import datetime
from arconsumer import Daemon
from arconsumer.reader import MessageActiveMQReader
from arconsumer.writter import MessageFileWritter
from arconsumer.writter import MessageAvroWritter

# topis deamon defaults
defaultDaemonConfigFile = '/etc/ar-consumer/ar-consumer.conf'
defaultDaemonPIDFile = '/var/log/ar-consumer/ar-consumer.pid' 
defaultDaemonStdIn = '/dev/null'
defaultDaemonStdOut = '/var/log/ar-consumer/ar-consumer.out'
defaultDaemonStdErr = '/var/log/ar-consumer/ar-consumer.err'
defaultDaemonName = 'ar-consumer'
defaultDebugOutput = 0

# reader defauls
defaultReaders = ['activemq']
defaultReaderConfigs = ['activemq-reader.conf']
defaultWritters = ['file']
defaultWritterConfigs = ['file-writter.conf']

class TopicDaemon(Daemon):

    def createLogEntry(self, msg):
        return datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S') + ' ' + msg + '\n'

    def run(self):
        
        logging.basicConfig(format='%(asctime)s %(message)s')
    
        #load config
        configFile = None
        configFields = dict()
        if os.path.isfile(defaultDaemonConfigFile):
            configFile = open(defaultDaemonConfigFile, 'r')
            lines = configFile.readlines()
        
            for line in lines:
                if line[0] == '#':
                    continue
                splitLine = line.split('=')
                if len(splitLine) > 1:
                    key = splitLine[0].strip()
                    value = splitLine[1].strip()
                    value = value.decode('string_escape')
                    if value[0] == "'":
                        if value [-1] == "'":
                            value = value[1:-1]
                        else:
                            continue
                    elif value[0] == '"':
                        if value [-1] == '"':
                            value = value[1:-1]
                        else:
                            continue
                    else:
                        value = int(value)
                    configFields[key] = value

            configFile.close()

        #apply config
        debugOutput = defaultDebugOutput
        if 'debugOutput' in configFields:
            debugOutput = configFields['debugOutput']
        readers = defaultReaders
        if 'readers' in configFields:
            readers = configFields['readers'].split(';')
        readerConfigs = defaultReaderConfigs
        if 'readerConfigs' in configFields:
            readerConfigs = configFields['readerConfigs'].split(';')

        writters = defaultWritters
        if 'writters' in configFields:
            writters = configFields['writters'].split(';')
        writterConfigs = defaultWritterConfigs
        if 'writterConfigs' in configFields:
            writterConfigs = configFields['writterConfigs'].split(';')
                

        # create readers and writters
        dataReaders = []
        dataWritters = []

        for i in range (0, len(writters)):
            writterType = writters[i]
            writterConfig = writterConfigs[i]

            writter = None
            if writterType == 'file':
                writter = MessageFileWritter()
                writter.loadConfig(writterConfig)
                dataWritters.append(writter)
            elif writterType == 'avro':
                writter = MessageAvroWritter()
                writter.loadConfig(writterConfig)
                dataWritters.append(writter)        

        for i in range (0, len(readers)):
            readerType = readers[i]
            readerConfig = readerConfigs[i]

            reader = None
            if readerType == 'activemq':
                reader = MessageActiveMQReader()
                reader.loadConfig(readerConfig)
                dataReaders.append(reader)
                for writter in dataWritters:
                    reader.addWritter(writter)

        for reader in dataReaders:
            reader.start()

        while True:
            exit = False
            for reader in dataReaders:
                if not reader.isRunning():
                    exit = True
                    break
            if exit:
                break
            time.sleep(1)
        
        sys.stdout.write(self.createLogEntry("%s ended\n" % self.name))
        sys.stdout.flush()

if __name__ == "__main__":
    daemon = TopicDaemon(defaultDaemonPIDFile, defaultDaemonStdIn, defaultDaemonStdOut, defaultDaemonStdErr, defaultDaemonName)
    if len(sys.argv) == 2:
        if 'start' == sys.argv[1]:
            daemon.start()
        elif 'stop' == sys.argv[1]:
            daemon.stop()
        elif 'restart' == sys.argv[1]:
            daemon.restart()
        elif 'status' == sys.argv[1]:
                        sys.exit(daemon.status())
        else:
            print "Unknown command"
            sys.exit(2)
        sys.exit(0)
    else:
        print "usage: %s start|stop|restart|status" % sys.argv[0]
        sys.exit(2)
