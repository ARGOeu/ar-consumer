#!/usr/bin/python

# Copyright (c) 2013 GRNET S.A., SRCE, IN2P3 CNRS Computing Centre
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language
# governing permissions and limitations under the License.
# 
# The views and conclusions contained in the software and
# documentation are those of the authors and should not be
# interpreted as representing official policies, either expressed
# or implied, of either GRNET S.A., SRCE or IN2P3 CNRS Computing
# Centre
# 
# The work represented by this source file is partially funded by
# the EGI-InSPIRE project through the European Commission's 7th
# Framework Programme (contract # INFSO-RI-261323) 

import sys
import os
import time
import stomp
import logging
from arconsumer import Daemon
from arconsumer import TopicListener
from arconsumer.writter import MessageFileWritter

# topis deamon defaults
defaultMsgServer = 'msg.cro-ngi.hr'
defaultMsgServerPort = 6163
defaultDaemonConfigFile = '/etc/ar-consumer/ar-consumer.conf'
defaultDaemonPIDFile = '/var/log/ar-consumer/ar-consumer.pid' 
defaultDaemonStdIn = '/dev/null'
defaultDaemonStdOut = '/var/log/ar-consumer/ar-consumer.out'
defaultDaemonStdErr = '/var/log/ar-consumer/ar-consumer.err'
defaultDaemonName = 'ar-consumer'
defaultListenerIdleTimeout = 0
defaultServerReconnectCycle = 1
defaultTopics = '/topic/grid.probe.metricOutput.EGEE.ngi.*'
defaultMessageWritterConfig = '/etc/ar-consumer/messagewritter.conf'
defaultDebugOutput = 0
defaultUseSSL = 0
defaultSSLCertificate = '/etc/grid-securuty/hostcert.pem'
defaultSSLKey = '/etc/grid-securuty/hostkey.pem'

class TopicDaemon(Daemon):
	def run(self):
		
		logging.basicConfig()
	
		#load config
		configFile = None
		configFields = dict()
		if os.path.isfile(defaultDaemonConfigFile):
			configFile = open(defaultDaemonConfigFile, 'r')
			lines = configFile.readlines()
		
			for line in lines:
				if line[0] == '#':
					continue
				splitLine = line.split('=')
            			if len(splitLine) > 1:
                			key = splitLine[0].strip()
                			value = splitLine[1].strip()
                                        value = value.decode('string_escape')
					if value[0] == "'":
						if value [-1] == "'":
							value = value[1:-1]
						else:
							continue
					elif value[0] == '"':
                                                if value [-1] == '"':
                                                        value = value[1:-1]
                                                else:
                                                        continue
                                        else:
                                            value = int(value)
                			configFields[key] = value

			configFile.close()

		# create listener
                listener = TopicListener()

		#apply config
		if 'topics' in configFields:
                	listener.topics = configFields['topics'].split(';')
            	else:
                	listener.topics = defaultTopics.split(';')

		messageWritterConfig = defaultMessageWritterConfig 
		if 'messageWritterConfig' in configFields:
                        messageWritterConfig = configFields['messageWritterConfig']
		msgServers = defaultMsgServer
		if 'msgServers' in configFields:
                        msgServers = configFields['msgServers']
		msgServerPort = defaultMsgServerPort
		if 'msgServerPort' in configFields:
                        msgServerPort = int(configFields['msgServerPort'])
		messageWritterConfig = defaultMessageWritterConfig
		if 'messageWritterConfig' in configFields:
                        messageWritterConfig = configFields['messageWritterConfig']
		debugOutput = defaultDebugOutput
                if 'debugOutput' in configFields:
                        debugOutput = configFields['debugOutput']
		listenerIdleTimeout = defaultListenerIdleTimeout
		if 'listenerIdleTimeout' in configFields:
                        listenerIdleTimeout = configFields['listenerIdleTimeout']
	        serverReconnectCycle = defaultServerReconnectCycle
                if 'serverReconnectCycle' in configFields:
                        serverReconnectCycle = configFields['serverReconnectCycle'] 
                
                # SSL               
                useSSL = defaultUseSSL == 1
                if 'useSSL' in configFields:
                        useSSL = configFields['useSSL'] == 1
	        SSLCertificate = defaultSSLCertificate
                if 'SSLCertificate' in configFields:
                        SSLCertificate = configFields['SSLCertificate']
                SSLKey = defaultSSLKey
                if 'SSLKey' in configFields:
                        SSLKey = configFields['SSLKey']


	
		###########################################################
		# STOMP connection
		# Have to set maual options for keepalive and reconnect attempts
		# if not set defaults are used.
		#
		# KEEPALIVE
		# keepalive = ( 'linux', TCP_KEEPIDLE, TCP_KEEPINTVL, TCP_KEEPCNT )
		#	'linux' - hase to be 'linux' - stomp.py requirements
		# 	TCP_KEEPALIVE - idle time in between keep-alives when there is a response from the peer
		# 	TCP_KEEPINTVL - interval between keep-alives when there is no response from the peer, this is done to probe the peer until there is a response.
		#	TCP_KEEPCNT - number of times keep-alives are repeated before a close when there is no response
		#
		# RECONNECT_ATTEMPTS_MAX
		# reconnect_attempts_max=1000
		# 	Max number of reconnect attempts
		###########################################################

                msgServerList = msgServers.split(';')
                msgServer = msgServerList[0]

		# loop
		retryCount = 0
                listener.connectedCounter = 0
		listener.debugOutput = debugOutput
                loopCount = 0
                serverReconnect = serverReconnectCycle + 1
		while True:

			reconnect = False
		
			#check connection
			if not listener.connected:
				listener.connectedCounter -= 1
				if listener.connectedCounter <= 0:				
					reconnect = True
			
			else:

                                ###########################################################
                                # RECONNECT ON no new messages in a while
                                # If the listener does not receive a new message in the
                                # defined timeout (listenerIdleTimeout) the application
                                # will reconnect.
   				# If this setting is set to 0 this check will not apply.
                                ###########################################################

                                if listenerIdleTimeout > 0 and loopCount >= listenerIdleTimeout:
                                        
					if not listener.messagesWritten > 0:
						reconnect = True

                                        loopCount = 0
                                        listener.messagesWritten = 0

			if reconnect:
                                # cycle msg server
                                if serverReconnect >= serverReconnectCycle:
                                        msgServerIdx = msgServerList.index(msgServer)
                                        msgServerIdx = (msgServerIdx+1) % len(msgServerList)
                                        msgServer = msgServerList[msgServerIdx]
                                        conn = stomp.Connection([(msgServer,msgServerPort)], keepalive=('linux', 20, 5, 10), reconnect_attempts_max=10, use_ssl=useSSL, ssl_key_file=SSLKey, ssl_cert_file=SSLCertificate)
                                        serverReconnect = 0
                                        retryCount = 0                       
                                        sys.stdout.write("Cycle to broker: %s\n" % msgServer)
                                        sys.stdout.flush()

				# message writter
                		msgWritter = MessageFileWritter()
                		msgWritter.loadConfig(messageWritterConfig)
                		listener.messageWritter = msgWritter
	
				# start connection
                                serverReconnect +=1
				conn.set_listener('topiclistener', listener)
				try:
					conn.start()
                			conn.connect()
					for topic in listener.topics: 			
						conn.subscribe(destination=topic, ack='auto')
					retryCount = 0
					listener.connectedCounter = 100
				except:
					sys.stdout.write("Reconnect %i FAILED\n" % retryCount)
					sys.stdout.flush()

					retryCount += 1
					listener.connectedCounter = 10
                                        	
			loopCount = loopCount + 1
			time.sleep(1)
		
		sys.stdout.write("%s ended\n" % self.name)
                sys.stdout.flush()

if __name__ == "__main__":
	daemon = TopicDaemon(defaultDaemonPIDFile, defaultDaemonStdIn, defaultDaemonStdOut, defaultDaemonStdErr, defaultDaemonName)
	if len(sys.argv) == 2:
		if 'start' == sys.argv[1]:
			daemon.start()
		elif 'stop' == sys.argv[1]:
			daemon.stop()
		elif 'restart' == sys.argv[1]:
			daemon.restart()
		elif 'status' == sys.argv[1]:
                        sys.exit(daemon.status())
		else:
			print "Unknown command"
			sys.exit(2)
		sys.exit(0)
	else:
		print "usage: %s start|stop|restart|status" % sys.argv[0]
		sys.exit(2)
